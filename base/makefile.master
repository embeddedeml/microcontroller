# compiler flags for c and cpp files
CFLAGS = -c -g -Os -Wall -ffunction-sections -fdata-sections -mmcu=$(MCU) $(USER_CFLAGS)
CPPFLAGS = -fno-exceptions $(CFLAGS) $(USER_CPPFLAGS)

# linker flags
LINK_FLAGS = -Os -Wl,--gc-sections -mmcu=$(MCU) -L$(OUTPUT_DIR) -lm $(USER_LINKFLAGS)

# programmer settings
UPLOAD_RATE = 19200
PORT = /dev/ttyACM0

AVRDUDE_PROGRAMMER = avr109
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:$(OUTPUT_DIR)/$(TARGET).hex
AVRDUDE_FLAGS = -F -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) -b $(UPLOAD_RATE) -C $(ARDUINO_DIR)/hardware/tools/avrdude.conf

# directories
OUTPUT_DIR = obj
ARDUINO_DIR = /home/mepping/Software/arduino
AVRDUDE = $(ARDUINO_DIR)/hardware/tools/avrdude
BIN = $(ARDUINO_DIR)/hardware/tools/avr/bin
ARDUINO_LIBS_DIR = $(ARDUINO_DIR)/libraries
ARDUINO_CORE_DIR = $(ARDUINO_DIR)/hardware/arduino/cores/arduino
BASE_LIBS_DIR = ../base
CORE_LIB = ../base/Arduino/obj/$(CORE_NAME).a

GCC = $(BIN)/avr-gcc
AR = $(BIN)/avr-ar
COPY = $(BIN)/avr-objcopy

# set up all the include folders
INCLUDES =	-I$(ARDUINO_CORE_DIR)                                               \
			$(foreach lib,$(ARDUINO_LIBRARIES), -I$(ARDUINO_LIBS_DIR)/$(lib))	\
			$(foreach lib,$(BASE_LIBRARIES), -I$(BASE_LIBS_DIR)/$(lib))	        \
			$(foreach inc,$(PROJECT_DIRS), -I$(inc)/)				            \
			$(foreach inc,$(USER_INCLUDES),-I$(inc))

# create a list of all the obj files to create for the library folders
BASE_LIB_OBJS = $(foreach lib, $(BASE_LIBRARIES), $(addprefix $(OUTPUT_DIR)/$(lib)/, $(addsuffix .o, $(notdir $(wildcard $(BASE_LIBS_DIR)/$(lib)/*.cpp) $(wildcard $(BASE_LIBS_DIR)/$(lib)/*.c)))))

# create a list of all the obj files to create for the project folders
PROJECT_OBJS = $(foreach folder, $(PROJECT_DIRS), $(addprefix $(OUTPUT_DIR)/$(folder)/, $(addsuffix .o, $(notdir $(wildcard $(folder)/*.cpp) $(wildcard $(folder)/*.c)))))

# create a list of dependency files (one for each project obj file)
DEPENDENCIES = $(PROJECT_OBJS:.o=.d)

# main build target
.PHONY: all
all: $(OUTPUT_DIR)/$(TARGET).hex
	@echo Finished building $<
	@echo
	
# rule to build the hex file
$(OUTPUT_DIR)/$(TARGET).hex: $(OUTPUT_DIR)/$(TARGET).elf
	@mkdir -p $(dir $@)
	@echo "Copying $@"
	@$(COPY) -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0 $(OUTPUT_DIR)/$(TARGET).elf $(OUTPUT_DIR)/$(TARGET).eep 
	@$(COPY) -O ihex -R .eeprom $(OUTPUT_DIR)/$(TARGET).elf $(OUTPUT_DIR)/$(TARGET).hex 

# rule to build the elf file
$(OUTPUT_DIR)/$(TARGET).elf: $(BASE_LIB_OBJS) $(PROJECT_OBJS)
	@echo "Linking $@"
	@$(GCC) $(LINK_FLAGS) -o $(OUTPUT_DIR)/$(TARGET).elf $(BASE_LIB_OBJS) $(PROJECT_OBJS) $(CORE_LIB)
	
#include the dependencies, if they exist	
-include $(DEPENDENCIES)

# rule to build the project .cpp files
$(OUTPUT_DIR)/%.cpp.o: %.cpp
	@mkdir -p $(dir $@)
	@echo "Compiling $(notdir $<)"
	@$(GCC) $(CPPFLAGS) $(INCLUDES) -MMD $< -o $@
	
# rule to build the project .c files
$(OUTPUT_DIR)/%.c.o: %.c
	@mkdir -p $(dir $@)
	@echo "Compiling $(notdir $<)"
	@$(GCC) $(CFLAGS) $(INCLUDES) -MMD $< -o $@
	
# rule to build the library source files
.SECONDEXPANSION:
BASE_LIB_SRC = $(BASE_LIBS_DIR)/$(basename $(subst $(OUTPUT_DIR)/,,$@))
$(BASE_LIB_OBJS): $$(BASE_LIB_SRC)
	@mkdir -p $(dir $@)
	@echo "Compiling $(notdir $<)"
	@$(GCC) $(CPPFLAGS) $(INCLUDES) $< -o $@

clean:
	@echo Cleaning...
	@-rm -f $(OUTPUT_DIR)/$(TARGET).eep
	@-rm -f $(OUTPUT_DIR)/$(TARGET).hex
	@-rm -f $(OUTPUT_DIR)/$(TARGET).elf
	@-rm -f $(ARDUINO_CORE_OBJS) $(BASE_LIB_OBJS) $(PROJECT_OBJS) $(DEPENDENCIES)

rebuild: clean all

.PHONY: deploy
deploy: $(OUTPUT_DIR)/$(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)
	cat /dev/ttyACM0
